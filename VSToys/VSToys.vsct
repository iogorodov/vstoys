<?xml version="1.0" encoding="utf-8"?>
<CommandTable xmlns="http://schemas.microsoft.com/VisualStudio/2005-10-18/CommandTable" xmlns:xs="http://www.w3.org/2001/XMLSchema">

	<!--  This is the file that defines the actual layout and type of the commands.
        It is divided in different sections (e.g. command definition, command
        placement, ...), with each defining a specific set of properties.
        See the comment before each section for more details about how to
        use it. -->

	<!--  The VSCT compiler (the tool that translates this file into the binary 
        format that VisualStudio will consume) has the ability to run a preprocessor 
        on the vsct file; this preprocessor is (usually) the C++ preprocessor, so 
        it is possible to define includes and macros with the same syntax used 
        in C++ files. Using this ability of the compiler here, we include some files 
        defining some of the constants that we will use inside the file. -->

	<!--This is the file that defines the IDs for all the commands exposed by VisualStudio. -->
	<Extern href="stdidcmd.h"/>

	<!--This header contains the command ids for the menus provided by the shell. -->
	<Extern href="vsshlids.h"/>

	<!--Definition of some VSCT specific constants. In this sample we use it for the IDs inside the guidOfficeIcon group. -->
	<Extern href="msobtnid.h"/>

	<!--The Commands section is where we the commands, menus and menu groups are defined.
      This section uses a Guid to identify the package that provides the command defined inside it. -->
	<Commands package="guidVSToysPkg">
		<!-- Inside this section we have different sub-sections: one for the menus, another  
    for the menu groups, one for the buttons (the actual commands), one for the combos 
    and the last one for the bitmaps used. Each element is identified by a command id that  
    is a unique pair of guid and numeric identifier; the guid part of the identifier is usually  
    called "command set" and is used to group different command inside a logically related  
    group; your package should define its own command set in order to avoid collisions  
    with command ids defined by other packages. -->

		<!-- In this section you can define new menu groups. A menu group is a container for 
         other menus or buttons (commands); from a visual point of view you can see the 
         group as the part of a menu contained between two lines. The parent of a group 
         must be a menu. -->
		<Menus>
			<Menu guid="guidVSToysCmdSet" id="QuickRunToolbar" priority="0x0000" type="Toolbar">
				<Parent guid="guidVSToysCmdSet" id="0"/>
				<Strings>
					<ButtonText>QuickRun</ButtonText>
					<CommandName>Quick Run</CommandName>
				</Strings>
			</Menu>
			<!--
			<Menu guid="guidVSToysCmdSet" id="TortoiseSVNMenu" priority ="0x0000" type="Menu">
				<Parent guid="guidVSToysCmdSet" id="TortoiseSVNMenuGroup" />
				<CommandFlag>AlwaysCreate</CommandFlag>
				<CommandFlag>DontCache</CommandFlag>
				<Strings>
					<MenuText>TortoiseSVN</MenuText>
					<ButtonText>TortoiseSVN</ButtonText>
					<CommandName>TortoiseSVN</CommandName>
				</Strings>
			</Menu>
			-->
		</Menus>
		
		<Groups>
			<Group guid="guidVSToysCmdSet" id="QuickRunToolbarGroup" priority="0xFF45">
				<Parent guid="guidSHLMainMenu" id="IDM_VS_MENU_TOOLS"/>
			</Group>
			<!--
			<Group guid="guidVSToysCmdSet" id="TortoiseSVNMenuGroup" priority="0x800">
				<Parent guid="guidVSToysCmdSet" id="IDM_VS_MENU_FILE"/>
			</Group>
			-->
		</Groups>

		<!--Buttons section. -->
		<!--This section defines the elements the user can interact with, like a menu command or a button 
        or combo box in a toolbar. -->
		<Buttons>
			<!--To define a menu group you have to specify its ID, the parent menu and its display priority. 
          The command is visible and enabled by default. If you need to change the visibility, status, etc, you can use
          the CommandFlag node.
          You can add more than one CommandFlag node e.g.:
              <CommandFlag>DefaultInvisible</CommandFlag>
              <CommandFlag>DynamicVisibility</CommandFlag>
          If you do not want an image next to your command, remove the Icon node or set it to <Icon guid="guidOfficeIcon" id="msotcidNoIcon" /> -->
			<Button guid="guidVSToysCmdSet" id="cmdidOpenFilesInSolution" priority="0x0100" type="Button">
				<Parent guid="guidSHLMainMenu" id="IDG_VS_FILE_OPENF_CASCADE" />
				<Strings>
					<CommandName>cmdidOpenFilesInSolution</CommandName>
					<ButtonText>Open Files In Solution...</ButtonText>
				</Strings>
			</Button>
			<!--
			<Button guid="guidVSToysCmdSet" id="cmdidOpenFilesInSolution2" priority="0x0100" type="Button">
				<Parent guid="guidVSToysCmdSet" id="TortoiseSVNMenu" />
				<Strings>
					<CommandName>cmdidOpenFilesInSolution</CommandName>
					<ButtonText>Open Files In Solution...</ButtonText>
				</Strings>
			</Button>
			-->
		</Buttons>

		<Combos>
			<!-- 	The following types of combo boxes are supported: 
       			DropDownCombo 
       				a DROPDOWNCOMBO does not let the user type into the combo box; they can only pick from the list. 
       	          The string value of the element selected is returned. 
       				For example, this type of combo could be used for the "Solution Configurations" on the "Standard" toolbar. 
       			IndexCombo 
       				An INDEXCOMBO is the same as a DROPDOWNCOMBO in that it is a "pick from list" only combo. 
       				The difference is an INDEXCOMBO returns the selected value as an index into the list (0 based). 
       				For example, this type of combo could be used for the "Solution Configurations" on the "Standard" toolbar. 
       			MRUCombo 
       				An MRUCOMBO allows the user to type into the edit box. The history of strings entered 
       	          is automatically persisted by the IDE on a per-user/per-machine basis.  
       				For example, this type of combo is used for the "Find" combo on the "Standard" toolbar. 
       			DynamicCombo 
       				A DYNAMICCOMBO allows the user to type into the edit box or pick from the list. The  
       				list of choices is usually fixed and is managed by the command handler for the command. 
       				For example, this type of combo is used for the "Zoom" combo on the "Class Designer" toolbar. 
       	 The following flags can be applied to Combo boxes: 
       			NoKeyCustomize		(rarely used) 
       			NoButtonCustomize	(rarely used) 
       			NoCustomize			(rarely used) 
       			DefaultInvisible	(often used) 
       			DefaultDisabled		(often used) 
       			DynamicVisibility	(often used) 
       			CommandWellOnly		(used for commands that should not be shown on main menu by default.) 
       								(NOTE: all commands should have a main menu placement defined as this is used 
       								as the organization of the command well. This flag makes the command 
       								hidden by default on the main menu. It does not affect other placements.) 
       			IconAndText			(sometimes used) 
       			FilterKeys			(rarely used ** used to hook window messages on commandbar controls) 
       			NoAutoComplete		(often used with DynamicCombo and MRUCombo) 
       			CaseSensitive		(used with MRUCombo ** controls whether strings are persisted in a case sensitive fashion) 
       			StretchHorizontallY	(only used with combos on Toolwindow toolbars. Tells combo to stretch to size of window) 
      
       	 The following strings can be supplied with a command: 
       			Button Text (required) ** displayed as label of the command on a toolbar if ICONANDTEXT flag is specified.  
       			   If any of the following optional strings are missing then Button Text is used instead. 
       	  	Menu Text (optional) ** displayed as label of the command on a menu if ICONANDTEXT flag is specified. 
        		Tooltip Text (optional) ** displayed when mouse hovers on command 
       			Command Well Name (optional) ** displayed as name of command in command well. 
       			Canonical Name (optional) ** English programmatic name of command used in Command Window and DTE.ExecuteCommand. 
       	             In localized command/menu (CTO) resources, always provide the English canonical name so macros can be language independent. 
       			Localized Canonical Name (optional) ** Localized programmatic name of command used in Command Window, DTE.ExecuteCommand, 
       	             and Tools.Options "Environment/Keyboard" page. 

       	Note: a DROPDOWNCOMBO does not let the user type into the combo box; they can only pick from the list. 
       	The string value of the element selected is returned. -->
			<Combo guid="guidVSToysCmdSet" id="cmdidStartupProjectCombo" priority="0x0010" type="IndexCombo" defaultWidth="150" idCommandList="cmdidStartupProjectComboGetList">
				<Parent guid="guidVSToysCmdSet" id="QuickRunToolbarGroup"/>
				<CommandFlag>CommandWellOnly</CommandFlag>
				<Strings>
					<ButtonText>Startup Project: </ButtonText>
					<ToolTipText>Startup Project</ToolTipText>
					<CommandName>Startup Project</CommandName>
					<CanonicalName>Startup Project</CanonicalName>
				</Strings>
			</Combo>

			<Combo guid="guidVSToysCmdSet" id="cmdidArgumentsCombo" priority="0x0011" type="DynamicCombo" defaultWidth="300" idCommandList="cmdidArgumentsComboGetList">
				<Parent guid="guidVSToysCmdSet" id="QuickRunToolbarGroup"/>
				<CommandFlag>CommandWellOnly</CommandFlag>
				<CommandFlag>CaseSensitive</CommandFlag>
				<Strings>
					<ButtonText>Arguments: </ButtonText>
					<ToolTipText>Command Line Arguments</ToolTipText>
					<CommandName>Command Line Arguments</CommandName>
					<CanonicalName>Command Line Arguments</CanonicalName>
				</Strings>
			</Combo>
		</Combos>
	</Commands>

	<CommandPlacements>
		<CommandPlacement guid="guidVSToysCmdSet" id="QuickRunToolbarGroup" priority="0x0100">
			<Parent guid="guidVSToysCmdSet" id="QuickRunToolbar"/>
		</CommandPlacement>
	</CommandPlacements>

	<Symbols>
		<!-- This is the package guid. -->
		<GuidSymbol name="guidVSToysPkg" value="{d94a8225-a439-4f38-9139-28ec78144f60}" />

		<!-- This is the guid used to group the menu commands together -->
		<GuidSymbol name="guidVSToysCmdSet" value="{3831e03d-0d99-4925-831e-fbc56839dc25}">
			<IDSymbol name="FileOpenMenuGroup" value="0x1020" />
			<IDSymbol name="QuickRunToolbar" value="0x1021" />
			<IDSymbol name="QuickRunToolbarGroup" value="0x1022" />
			<!--
			<IDSymbol name="TortoiseSVNMenu" value="0x1023" />
			<IDSymbol name="TortoiseSVNMenuGroup" value="0x1024" />
			-->

			<IDSymbol name="cmdidOpenFilesInSolution" value="0x0100" />
			<IDSymbol name="cmdidArgumentsCombo" value="0x0101" />
			<IDSymbol name="cmdidArgumentsComboGetList" value="0x0102" />
			<IDSymbol name="cmdidStartupProjectCombo" value="0x0103" />
			<IDSymbol name="cmdidStartupProjectComboGetList" value="0x0104" />
			<!--
			<IDSymbol name="cmdidOpenFilesInSolution2" value="0x0105" />
			-->
		</GuidSymbol>
	</Symbols>
</CommandTable>
